<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Core.2.0.0\lib\net452\Rainbow.dll" #>
<#@ assembly name="$(SolutionDir)packages\Rainbow.Storage.Yaml.2.0.0\lib\net452\Rainbow.Storage.Yaml.dll" #>
<#@ assembly name="$(SolutionDir)packages\RainbowCodeGeneration.0.3.0\lib\net452\RainbowCodeGeneration.dll" #>
<#@ assembly name="$(SolutionDir)packages\Sitecore.Kernel.NoReferences.9.0.180604\lib\NET462\Sitecore.Kernel.dll" #>
<#@ assembly name="$(SolutionDir)packages\Sitecore.Logging.NoReferences.9.0.180604\lib\NET462\Sitecore.Logging.dll" #>
<#@ assembly name="$(SolutionDir)packages\Microsoft.Extensions.DependencyInjection.Abstractions.1.0.0\lib\netstandard1.0\Microsoft.Extensions.DependencyInjection.Abstractions.dll" #>
<#@ assembly name="$(SolutionDir)packages\Microsoft.Extensions.DependencyInjection.1.0.0\lib\netstandard1.1\Microsoft.Extensions.DependencyInjection.dll" #>
<#
// CONFIGURATION
var physicalFileStore = @"..\serialization"; // the path to your serialization items
var treeName = "Project.Draniki.Templates"; // the name of the configuration you want to code-generate
var treePath = "/sitecore/templates/2019.draniki/Project/Draniki"; // the matching path in Sitecore for the configuration

var Tool = "RainbowCodeGeneration";
var ToolVersion = "1.0";
var templates = RainbowCodeGeneration.RainbowReader.GetTemplates(Host.ResolvePath(physicalFileStore), treeName, treePath);
templates = System.Linq.Enumerable.Select(templates, x => new RainbowCodeGeneration.Models.Template(x.Item, System.Linq.Enumerable.OrderBy(x.Fields, f => f.Path)));
templates = System.Linq.Enumerable.OrderBy(templates, x => x.Item.Path);
#>
<#@ import namespace="RainbowCodeGeneration" #>
<#@ import namespace="Rainbow.Model" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated based on the Unicorn serialization items
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable InconsistentNaming
namespace 2019.draniki.Project.Draniki.Models
{
	using System;
	using System.Collections.Generic;
	using System.Collections.Specialized;
	using System.Linq;
	using System.Text;
	using Glass.Mapper.Sc.Configuration.Attributes;
	using Glass.Mapper.Sc.Configuration;
	using Glass.Mapper.Sc.Fields;
	using Sitecore.Globalization;
	using Sitecore.Data;
	using Sitecore.Data.Items;
	using System.CodeDom.Compiler;
	using 2019.draniki.Foundation.GlassMapper.Models;
	
<# try { #>
<# foreach (var template in templates) { #>
	/// <summary>
	/// <#= template.Item.Name #> Tempalate Data
	/// <para><#= template.Item.GetSharedField("__Short description") #></para>
	/// <para>Template Path: <#= template.Item.Path #></para>
	/// <para>Template ID: <#= template.Item.Id #></para>
	/// </summary>
	public static partial class <#= StringExtensions.AsClassName(template.Item.Name).Replace("_", string.Empty) #>Template
	{
		/// <summary>
		/// The TemplateId string for <#= template.Item.Path #>
		/// </summary>
		public static ID Id = new ID("<#= template.Item.Id.ToString("B").ToUpper() #>");

		public struct FieldId
		{
<# foreach (var field in template.Fields) { #>
			public static readonly ID <#= StringExtensions.AsPropertyName(field.Name).Replace("_", string.Empty) #> = new ID("<#= field.Id.ToString("B").ToUpper() #>");
<# } // foreach field #>
		}

		public struct FieldsName
		{
<# foreach (var field in template.Fields) { #>
			public static readonly string <#= StringExtensions.AsPropertyName(field.Name).Replace("_", string.Empty) #> = "<#= field.Name #>";
<# } // foreach field #>
		}
	}

	/// <summary>
	/// <#= StringExtensions.AsInterfaceName(template.Item.Name).Replace("_", string.Empty) #> Interface
	/// <para><#= template.Item.GetSharedField("__Short description") #></para>
	/// <para>Path: <#= template.Item.Path #></para>
	/// <para>ID: <#= template.Item.Id #></para>
	/// </summary>
	[SitecoreType(EnforceTemplate = SitecoreEnforceTemplate.TemplateAndBase, TemplateId="<#= template.Item.Id #>")] //, Cachable = true
	public partial interface <#= StringExtensions.AsInterfaceName(template.Item.Name).Replace("_", string.Empty) #> : IGlassBase
	{
<# foreach (var field in template.Fields) { #>
		[SitecoreField("<#=field.Name#>")]
		<#=GetGlassFieldType(field)#> <#= StringExtensions.AsPropertyName(field.Name).Replace("_", string.Empty) #> { get; set; }
<# } // foreach field #>
	}

	/// <summary>
	/// <#= template.Item.Name #>
	/// <para><#= template.Item.GetSharedField("__Short description") #></para>
	/// <para>Path: <#= template.Item.Path #></para>
	/// <para>ID: <#= template.Item.Id #></para>
	/// </summary>
	public partial class <#= StringExtensions.AsClassName(template.Item.Name).Replace("_", string.Empty) #> : GlassBase, <#= StringExtensions.AsInterfaceName(template.Item.Name).Replace("_", string.Empty) #> //, Cachable = true
	{
		/// <summary>
		/// The TemplateId string for <#= template.Item.Path #>
		/// </summary>
		public const string TemplateId = "<#= template.Item.Id #>";
<# foreach (var field in template.Fields) { #>
		[SitecoreField("<#=field.Name#>")]
		public <#=GetGlassFieldType(field)#> <#= StringExtensions.AsPropertyName(field.Name).Replace("_", string.Empty) #> { get; set; }
<# } // foreach field #>
	}
<# } #>
<# } catch (Exception ex) { Console.WriteLine(ex); } #>
}
<#+
public static string GetGlassFieldType(IItemData field)
{
	if (field != null)
	{
		// Pull out any 'type' param from the custom data field on the field in code generation
		string type = field.GetSharedField("Type");
		switch(type.ToLower())
		{
			case "tristate":
				return "TriState";
			case "checkbox":
				return "bool";

			case "date":
			case "datetime":
				return "DateTime";

			case "number":
				return "float";

			case "integer":
				return "int";

			case "treelist":
			case "treelistex":
			case "treelist descriptive":
			case "checklist":
			case "multilist":
				return "IEnumerable<Guid>";

			case "grouped droplink":
			case "droplink":
			case "lookup":
			case "droptree":
			case "reference":
			case "tree":
				return "Guid";

			case "file":
				return "File";

			case "image":
				return "Image";

			case "rich text":
			case "html":
				return "string";

			case "general link":
				return "Link";

			case "single-line text":
			case "multi-line text":
			case "frame":
			case "text":
			case "memo":
			case "droplist":
			case "grouped droplist":
			case "valuelookup":
				return "string";
			default:
				return "object /* UNKNOWN */";
		}
	}
	else
	{
		throw new Exception("There is no 'Type' field on the " + field.Name + " field.");
	}
}
#>