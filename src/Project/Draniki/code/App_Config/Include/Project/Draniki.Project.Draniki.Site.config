<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" 
    xmlns:set="http://www.sitecore.net/xmlconfig/set/" 
    xmlns:env="http://www.sitecore.net/xmlconfig/env/" 
    xmlns:role="http://www.sitecore.net/xmlconfig/role/">
    <sitecore>
        <sites>
            <site patch:before="site[@name='website']" inherits="website" name="draniki" hostName="2019-draniki.local" rootPath="/sitecore/content/draniki/draniki" startItem="/Home" database="master" enableItemLanguageFallback="true" />
        </sites>

        <javaScriptServices>
            <apps>
                <!-- you may override other attributes from 'defaults' in the app definiton below -->
                <app name="draniki" sitecorePath="/sitecore/content/draniki/draniki" filesystemPath="/dist/Draniki/Project/Draniki" inherits="defaults" />
            </apps>
        </javaScriptServices>

        <api>
            <GraphQL>
                <endpoints>
                    <!-- Define an endpoint. The XML element name ('master') should be unique. The 'url' is what you'll use to access the endpoint. -->
                    <draniki url="/sitecore/api/graph/draniki" type="Sitecore.Services.GraphQL.Hosting.GraphQLEndpoint, Sitecore.Services.GraphQL.NetFxHost" resolve="true">
                        <url>$(url)</url>

                        <schema hint="list:AddSchemaProvider">
                            <whoDat type="Draniki.Project.Draniki.Temp.WhoAmISchemaProvider, Draniki.Project.Draniki" />
                        </schema>

                        <!-- 
                          Determines the security of the service. Defaults are defined in Sitecore.Services.GraphQL.config. 'publicService' allows anonymous access, but requires passing an SSC API key. 
                          'systemService' requires Sitecore authentication cookies to be passed.
                        -->
                        <security ref="/sitecore/api/GraphQL/defaults/security/publicService" />

                        <!-- 
                          Determines how performance is logged for the service. Defaults are defined in Sitecore.Services.GraphQL.config
                        -->
                        <performance ref="/sitecore/api/GraphQL/defaults/performance/standard" />

                        <!--
                            Cache improves the query performance by caching parsed queries.
                            It is also possible to implement query whitelisting by implementing an authoritative query cache;
                            WhitelistingGraphQLQueryCache is an example of this, capturing queries to files in open mode and allowing only captured queries in whitelist mode.
                        -->
                        <cache type="Sitecore.Services.GraphQL.Hosting.QueryTransformation.Caching.GraphQLQueryCache, Sitecore.Services.GraphQL.NetFxHost">
                            <param desc="name">$(url)</param>
                            <param desc="maxSize">10MB</param>
                        </cache>

                        <!-- 
                            Extenders allow modifying schema types after they are created by a schema provider but before they are added to the final schema.
                            This is useful when you want to _extend_ a generated schema, for example to add external API
                            data onto the item API, or to add in custom internal data (e.g. custom layout data to power an app)
                            without having to directly modify a schema provider.

                            Extenders must derive from SchemaExtender.

                            Extender example: <myExtender type="My.Class, My.Assembly" resolve="true" />
                        -->
                        <extenders hint="list:AddExtender">
                        </extenders>
                    </draniki>
                </endpoints>
            </GraphQL>
        </api>

    </sitecore>
</configuration>